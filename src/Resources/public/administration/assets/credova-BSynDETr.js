const r=`<sw-page headerBorderColor="#9AA8B5"> <template #smart-bar-header> <div class="sw-page__smart-bar-header"> <h2>{{ $tc('sw-settings-credova.general.settings')}}</h2> <mt-icon name="regular-chevron-right-xs" size="12px" /> <h2>{{ $tc('sw-settings-credova.general.mainMenuItemGeneral')}}</h2> </div> </template> <template #smart-bar-actions> <sw-button @click="onButtonClick" variant="secondary" > {{ $tc('sw-settings-credova.general.saveConfigs') }} </sw-button> </template> <template #content> <sw-settings-credova-form ref="credovaForm" /> </template> </sw-page>`,l=`<mt-card style="margin-top: 40px;" :title="$tc('sw-settings-credova.card.salesChannelSettings')"> <sw-sales-channel-switch ref="salesChannelSwitch" :sales-channel-id="salesChannelId" :label="$tc('sw-settings-credova.label.salesChannelSelect')" @change-sales-channel-id="onSalesChannelChanged" /> </mt-card> <mt-card :title="$tc('sw-settings-credova.card.displayRules')"> <div> <div class="sw-settings-credova-form__label"> {{ $tc('sw-settings-credova.label.minFinanceAmount') }} <sw-help-text :text="$tc('sw-settings-credova.help.minFinanceAmount')"/> </div> <sw-number-field v-model:value="config['Credova.config.minFinanceAmount']" step="1"/> </div> <div> <div class="sw-settings-credova-form__label"> {{ $tc('sw-settings-credova.label.maxFinanceAmount') }} <sw-help-text :text="$tc('sw-settings-credova.help.maxFinanceAmount')"/> </div> <sw-number-field v-model:value="config['Credova.config.maxFinanceAmount']" step="1"/> </div> <div class="sw-settings-credova-form__label"> <sw-switch-field v-model:value="config['Credova.config.showAsLowAs']" :label="$tc('sw-settings-credova.label.showAsLowAs')"/> <sw-help-text :text="$tc('sw-settings-credova.help.showAsLowAs')"/> </div> </mt-card> <mt-card :title="$tc('sw-settings-credova.card.checkoutFlow')"> <sw-single-select v-model:value="config['Credova.config.checkoutFlow']" :options="checkoutFlowOptions" placeholder="Select Flow Type" :label="$tc('sw-settings-credova.label.checkoutFlow')"/> </mt-card> <mt-card :title="$tc('sw-settings-credova.card.popupConfig')"> <sw-single-select v-model:value="config['Credova.config.popupType']" :options="popupTypeOptions" placeholder="Select Popup Type" :label="$tc('sw-settings-credova.label.popupType')"/> </mt-card>`,{Component:g,Mixin:d}=Shopware;g.register("sw-settings-credova-form",{template:l,inject:["systemConfigApiService"],mixins:[d.getByName("notification")],data(){return{salesChannelId:null,config:{},configs:{},popupTypeOptions:[{value:"iframe",label:this.$tc("sw-settings-credova.options.popupType.iframe")},{value:"popup",label:this.$tc("sw-settings-credova.options.popupType.popup")}],checkoutFlowOptions:[{value:"auth_capture",label:this.$tc("sw-settings-credova.options.checkoutFlow.auth_capture")},{value:"auth_only",label:this.$tc("sw-settings-credova.options.checkoutFlow.auth_only")},{value:"order_first",label:this.$tc("sw-settings-credova.options.checkoutFlow.order_first")}]}},created(){this.salesChannelId=null,this.loadConfig()},methods:{async onSalesChannelChanged(e){this.salesChannelId=e,await this.loadConfig()},async loadConfig(){try{const s=(await this.systemConfigApiService.getConfig("core.basicInformation"))[0].elements.find(t=>t.name==="core.basicInformation.shopName");this.shopName=s?s.defaultValue:null;const o=await this.systemConfigApiService.getValues("core.basicInformation",null);this.shopName=o["core.basicInformation.shopName"],console.log("Config loaded:",this.shopName);const i=await this.systemConfigApiService.getValues("Credova.config",this.salesChannelId);this.config={...i},this.config.popupType!==void 0&&(this.config.popupType=String(this.config.popupType)),this.config.checkoutFlow!==void 0&&(this.config.checkoutFlow=String(this.config.checkoutFlow))}catch{this.createNotificationError({title:this.$tc("sw-settings-credova.notification.loadError.title"),message:this.$tc("sw-settings-credova.notification.loadError.message")})}},async saveConfig(){const e=Number(this.config["Credova.config.minFinanceAmount"]),s=Number(this.config["Credova.config.maxFinanceAmount"]);if(e<300||e>5e3||s<300||s>5e3){this.createNotificationWarning({title:this.$tc("sw-settings-credova.notification.validation.title"),message:this.$tc("sw-settings-credova.notification.validation.message")});return}try{await this.systemConfigApiService.saveValues(this.config,this.salesChannelId),this.createNotificationSuccess({title:this.$tc("sw-settings-credova.notification.saveSuccess.title"),message:this.$tc("sw-settings-credova.notification.saveSuccess.message")})}catch{this.createNotificationError({title:this.$tc("sw-settings-credova.notification.saveError.title"),message:this.$tc("sw-settings-credova.notification.saveError.message")})}}}});const{Component:p,Context:m}=Shopware;p.register("sw-settings-credova-list",{template:r,mounted(){this.fetchShopwareVersion()},methods:{onButtonClick(){this.$refs.credovaForm.saveConfig()}}});const{Module:a,Context:h}=Shopware;function c(e,s){const o=e.split(".").map(Number),i=s.split(".").map(Number);for(let t=0;t<Math.max(o.length,i.length);t++){if((o[t]||0)>(i[t]||0))return 1;if((o[t]||0)<(i[t]||0))return-1}return 0}const n=h.app.config.version;console.log("Current Shopware Version:",n);c(n,"6.7.0")>=0?a.register("sw-settings-credova",{type:"plugin",name:"CredovaSettings",description:"sw-settings-credova.general.descriptionTextModule",version:"1.0.0",targetVersion:"1.0.0",icon:"regular-cog",favicon:"icon-module-settings.png",routes:{index:{component:"sw-settings-credova-list",path:"index"}},settingsItem:{group:"credova",to:"sw.settings.credova.index",icon:"regular-credit-card",label:"sw-settings-credova.general.mainMenuItemGeneral"}}):c(n,"6.6.0")>=0?a.register("sw-settings-credova",{type:"plugin",name:"sw-settings-credova",title:"Credova Settings",description:"Manage settings for Credova integration",color:"#000000",icon:"regular-cog",routes:{index:{component:"sw-settings-credova-list",path:"index"}},settingsItem:{group:"system",to:"sw.settings.credova.index",icon:"regular-cog"}}):console.warn("Shopware version below 6.6.0 is not supported by this module.");
//# sourceMappingURL=credova-BSynDETr.js.map

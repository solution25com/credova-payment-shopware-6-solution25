{"version":3,"file":"credova-BSynDETr.js","sources":["../../../app/administration/src/module/sw-settings-credova/page/sw-settings-credova-list/sw-settings-credova-list.html.twig","../../../app/administration/src/module/sw-settings-credova/component/sw-settings-credova-form/sw-settings-credova-form.html.twig","../../../app/administration/src/module/sw-settings-credova/component/sw-settings-credova-form/index.js","../../../app/administration/src/module/sw-settings-credova/page/sw-settings-credova-list/index.js","../../../app/administration/src/module/sw-settings-credova/index.js"],"sourcesContent":["<sw-page headerBorderColor=\"#9AA8B5\">\n    <template #smart-bar-header>\n      <div class=\"sw-page__smart-bar-header\">\n        <h2>{{ $tc('sw-settings-credova.general.settings')}}</h2>\n        <mt-icon\n             name=\"regular-chevron-right-xs\"\n             size=\"12px\"\n        />\n        <h2>{{ $tc('sw-settings-credova.general.mainMenuItemGeneral')}}</h2>\n        </div>\n    </template>\n    <template #smart-bar-actions>\n        <sw-button\n            @click=\"onButtonClick\"\n            variant=\"secondary\"\n        >\n            {{ $tc('sw-settings-credova.general.saveConfigs') }}\n        </sw-button>\n    </template>\n\n    <template #content>\n        <sw-settings-credova-form ref=\"credovaForm\" />\n    </template>\n</sw-page>\n","<mt-card style=\"margin-top: 40px;\" :title=\"$tc('sw-settings-credova.card.salesChannelSettings')\">\n    <sw-sales-channel-switch\n        ref=\"salesChannelSwitch\"\n        :sales-channel-id=\"salesChannelId\"\n        :label=\"$tc('sw-settings-credova.label.salesChannelSelect')\"\n        @change-sales-channel-id=\"onSalesChannelChanged\"\n    />\n</mt-card>\n\n<mt-card :title=\"$tc('sw-settings-credova.card.displayRules')\">\n\t<div>\n\t\t<div class=\"sw-settings-credova-form__label\">\n\t\t\t{{ $tc('sw-settings-credova.label.minFinanceAmount') }}\n\t\t\t<sw-help-text :text=\"$tc('sw-settings-credova.help.minFinanceAmount')\"/>\n\t\t</div>\n\t\t<sw-number-field v-model:value=\"config['Credova.config.minFinanceAmount']\" step=\"1\"/>\n\t</div>\n\t<div>\n\t\t<div class=\"sw-settings-credova-form__label\">\n\t\t\t{{ $tc('sw-settings-credova.label.maxFinanceAmount') }}\n\t\t\t<sw-help-text :text=\"$tc('sw-settings-credova.help.maxFinanceAmount')\"/>\n\t\t</div>\n\t\t<sw-number-field v-model:value=\"config['Credova.config.maxFinanceAmount']\" step=\"1\"/>\n\t</div>\n\n\t<div class=\"sw-settings-credova-form__label\">\n\t\t<sw-switch-field v-model:value=\"config['Credova.config.showAsLowAs']\" :label=\"$tc('sw-settings-credova.label.showAsLowAs')\"/>\n\t\t<sw-help-text :text=\"$tc('sw-settings-credova.help.showAsLowAs')\"/>\n\t</div>\n</mt-card>\n\n<mt-card :title=\"$tc('sw-settings-credova.card.checkoutFlow')\">\n\t<sw-single-select v-model:value=\"config['Credova.config.checkoutFlow']\" :options=\"checkoutFlowOptions\" placeholder=\"Select Flow Type\" :label=\"$tc('sw-settings-credova.label.checkoutFlow')\"/>\n</mt-card>\n\n<mt-card :title=\"$tc('sw-settings-credova.card.popupConfig')\">\n\t<sw-single-select v-model:value=\"config['Credova.config.popupType']\" :options=\"popupTypeOptions\" placeholder=\"Select Popup Type\" :label=\"$tc('sw-settings-credova.label.popupType')\"/>\n</mt-card>\n","import template from './sw-settings-credova-form.html.twig';\nimport './sw-settings-credova-form.scss';\nconst { Component, Mixin } = Shopware;\n\nComponent.register('sw-settings-credova-form', {\n    template,\n    inject: ['systemConfigApiService'],\n    mixins: [Mixin.getByName('notification')],\n\n    data() {\n        return {\n            salesChannelId: null, \n            config: {},\n            configs: {},\n            popupTypeOptions: [\n                { value: 'iframe', label: this.$tc('sw-settings-credova.options.popupType.iframe') },\n                { value: 'popup', label: this.$tc('sw-settings-credova.options.popupType.popup') }\n            ],\n            checkoutFlowOptions: [\n                { value: 'auth_capture', label: this.$tc('sw-settings-credova.options.checkoutFlow.auth_capture') },\n                { value: 'auth_only', label: this.$tc('sw-settings-credova.options.checkoutFlow.auth_only') },\n                { value: 'order_first', label: this.$tc('sw-settings-credova.options.checkoutFlow.order_first')}\n            ]\n        };\n    },    \n\n    created() {\n        this.salesChannelId = null;\n        this.loadConfig();\n    },\n\n    methods: {\n        async onSalesChannelChanged(salesChannelId) {\n            this.salesChannelId = salesChannelId;\n            await this.loadConfig();\n        },\n\n        async loadConfig() {\n            try {\n\n                const config = await this.systemConfigApiService.getConfig('core.basicInformation');\n                // The shop name is usually in the config as:\n                // config[0].elements.find(e => e.name === 'core.basicInformation.shopName')\n                const shopNameField = config[0].elements.find(\n                    el => el.name === 'core.basicInformation.shopName'\n                );\n                this.shopName = shopNameField ? shopNameField.defaultValue : null;\n                // Or, get the value (not schema) with getValues:\n                const valuesa = await this.systemConfigApiService.getValues('core.basicInformation', null);\n                this.shopName = valuesa['core.basicInformation.shopName'];\n                console.log('Config loaded:', this.shopName);\n                const values = await this.systemConfigApiService.getValues('Credova.config', this.salesChannelId);\n                this.config = { ...values };\n\n                if (this.config.popupType !== undefined) {\n                    this.config.popupType = String(this.config.popupType);\n                }\n\n                if (this.config.checkoutFlow !== undefined) {\n                    this.config.checkoutFlow = String(this.config.checkoutFlow);\n                }\n            } catch (e) {\n                this.createNotificationError({\n                    title: this.$tc('sw-settings-credova.notification.loadError.title'),\n                    message: this.$tc('sw-settings-credova.notification.loadError.message')\n                });                \n            }\n        },\n\n        async saveConfig() {\n            const min = Number(this.config['Credova.config.minFinanceAmount']);\n            const max = Number(this.config['Credova.config.maxFinanceAmount']);\n        \n            if (min < 300 || min > 5000 || max < 300 || max > 5000) {\n                this.createNotificationWarning({\n                    title: this.$tc('sw-settings-credova.notification.validation.title'),\n                    message: this.$tc('sw-settings-credova.notification.validation.message')\n                });\n                return;\n            }            \n        \n            try {\n                await this.systemConfigApiService.saveValues(this.config, this.salesChannelId);\n                this.createNotificationSuccess({\n                    title: this.$tc('sw-settings-credova.notification.saveSuccess.title'),\n                    message: this.$tc('sw-settings-credova.notification.saveSuccess.message')\n                });\n            } catch (e) {\n                this.createNotificationError({\n                    title: this.$tc('sw-settings-credova.notification.saveError.title'),\n                    message: this.$tc('sw-settings-credova.notification.saveError.message')\n                });                \n            }\n        }\n    }\n});\n","import template from './sw-settings-credova-list.html.twig';\nimport './sw-settings-credova-list.scss';\nimport '../../component';\n\nconst { Component, Context } = Shopware;\n\nComponent.register('sw-settings-credova-list', {\n    template,\n\n    mounted() {\n        this.fetchShopwareVersion();\n    },\n\n    methods: {\n        onButtonClick() {\n            this.$refs.credovaForm.saveConfig();\n        }\n    }\n});\n","import './page/sw-settings-credova-list';\n\nconst { Module, Context } = Shopware;\n\nfunction compareVersions(v1, v2) {\n    const a = v1.split('.').map(Number);\n    const b = v2.split('.').map(Number);\n    for (let i = 0; i < Math.max(a.length, b.length); i++) {\n        if ((a[i] || 0) > (b[i] || 0)) return 1;\n        if ((a[i] || 0) < (b[i] || 0)) return -1;\n    }\n    return 0;\n}\n\nconst currentVersion = Context.app.config.version;\nconsole.log('Current Shopware Version:', currentVersion);\n\nif (compareVersions(currentVersion, '6.7.0') >= 0) {\n    Module.register('sw-settings-credova', {\n        type: 'plugin',\n        name: 'CredovaSettings',\n        description: 'sw-settings-credova.general.descriptionTextModule',\n        version: '1.0.0',\n        targetVersion: '1.0.0',\n        icon: 'regular-cog',\n        favicon: 'icon-module-settings.png',\n        routes: {\n            index: {\n                component: 'sw-settings-credova-list',\n                path: 'index',\n            }\n        },\n        settingsItem: {\n            group: 'credova',\n            to: 'sw.settings.credova.index',\n            icon: 'regular-credit-card',\n            label: 'sw-settings-credova.general.mainMenuItemGeneral'\n        }\n    });\n} else if (compareVersions(currentVersion, '6.6.0') >= 0) {\n    Module.register('sw-settings-credova', {\n        type: 'plugin',\n        name: 'sw-settings-credova',\n        title: 'Credova Settings',\n        description: 'Manage settings for Credova integration',\n        color: '#000000',\n        icon: 'regular-cog',\n        routes: {\n            index: {\n                component: 'sw-settings-credova-list',\n                path: 'index'\n            }\n        },\n        settingsItem: {\n            group: 'system',\n            to: 'sw.settings.credova.index',\n            icon: 'regular-cog'\n        }\n    });\n} else {\n    console.warn('Shopware version below 6.6.0 is not supported by this module.');\n}\n"],"names":["template$1","template","Component","Mixin","salesChannelId","shopNameField","el","valuesa","values","min","max","Context","Module","compareVersions","v1","v2","a","b","i","currentVersion"],"mappings":"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"}